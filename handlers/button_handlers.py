from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from storage import storage
import logging
from datetime import datetime
import random

logger = logging.getLogger(__name__)

def create_squad_keyboard(team):
    """Create keyboard for squad management"""
    keyboard = []
    for player in team.squad:
        is_active = player in team.active_players
        status = "‚úÖ" if is_active else "‚ûï"
        keyboard.append([InlineKeyboardButton(
            f"{status} {player['name']} ({player['rarity']})",
            callback_data=f"toggle_player_{player['id']}"
        )])
    return InlineKeyboardMarkup(keyboard)

def create_support_keyboard():
    """Create keyboard for club support options"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –î–∞—Ç—å –¥–µ–Ω–µ–≥ (+500)", callback_data="support_money")],
        [InlineKeyboardButton("üë§ –ü–æ–¥–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="support_player")],
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data="support_strategy")]
    ]
    return InlineKeyboardMarkup(keyboard)

def format_power_comparison(old_power, new_power):
    """Format power comparison message with arrows and colors"""
    message = "\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥—ã:\n"
    
    for stat, new_value in new_power.items():
        old_value = old_power[stat]
        diff = new_value - old_value
        
        if stat == 'speed':
            icon = '‚ö°Ô∏è'
            name = '–°–∫–æ—Ä–æ—Å—Ç—å'
        elif stat == 'mentality':
            icon = 'üß†'
            name = '–ú–µ–Ω—Ç–∞–ª–∫–∞'
        elif stat == 'finishing':
            icon = '‚öΩÔ∏è'
            name = '–£–¥–∞—Ä'
        else:  # defense
            icon = 'üõ°'
            name = '–ó–∞—â–∏—Ç–∞'
            
        if diff > 0:
            arrow = '‚¨ÜÔ∏è'
            diff_text = f"+{diff}"
        elif diff < 0:
            arrow = '‚¨áÔ∏è'
            diff_text = str(diff)
        else:
            arrow = '‚ûñ'
            diff_text = "0"
            
        message += f"{icon} {name}: {old_value} {arrow} {new_value} ({diff_text})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
    old_rating = calculate_team_rating(old_power)
    new_rating = calculate_team_rating(new_power)
    rating_diff = new_rating - old_rating
    
    if rating_diff > 0:
        rating_arrow = '‚¨ÜÔ∏è'
        rating_diff_text = f"+{rating_diff:.1f}"
    elif rating_diff < 0:
        rating_arrow = '‚¨áÔ∏è'
        rating_diff_text = f"{rating_diff:.1f}"
    else:
        rating_arrow = '‚ûñ'
        rating_diff_text = "0"
    
    message += f"\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {old_rating:.1f} {rating_arrow} {new_rating:.1f} ({rating_diff_text})"
    
    return message

def calculate_team_rating(team_power):
    """Calculate overall team rating based on power stats"""
    # –í–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    weights = {
        'speed': 0.25,
        'mentality': 0.2,
        'finishing': 0.35,
        'defense': 0.2
    }
    
    rating = sum(team_power[stat] * weight for stat, weight in weights.items())
    return round(rating, 1)

def format_squad_message(team):
    """Format squad message with active and reserve players"""
    message = "üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    team_power = team.get_team_power()
    team_rating = calculate_team_rating(team_power)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
    message += f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã: {team_rating}\n"
    message += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(team.active_players)}/3\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    message += "üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
    message += f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {team_power['speed']}\n"
    message += f"üß† –ú–µ–Ω—Ç–∞–ª–∫–∞: {team_power['mentality']}\n"
    message += f"‚öΩÔ∏è –£–¥–∞—Ä: {team_power['finishing']}\n"
    message += f"üõ° –ó–∞—â–∏—Ç–∞: {team_power['defense']}\n\n"
    
    message += "üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
    
    active_players = team.active_players
    reserve_players = [p for p in team.squad if p not in active_players]
    
    for player in active_players:
        stats = player['stats']
        message += (
            f"‚Ä¢ {player['name']} ({player['rarity'].capitalize()})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )
    
    message += "\nüîÑ –ó–∞–ø–∞—Å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
    for player in reserve_players:
        stats = player['stats']
        message += (
            f"‚Ä¢ {player['name']} ({player['rarity'].capitalize()})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )
    
    return message

def handle_toggle_player(update: Update, context: CallbackContext):
    """Handle player toggle in squad"""
    query = update.callback_query
    logger.info(f"Received toggle player callback: {query.data}")
    
    try:
        user_id = str(query.from_user.id)
        team = storage.get_team(user_id)
        if not team:
            logger.warning(f"Team not found for user {user_id}")
            query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        player_id = int(query.data.split('_')[-1])
        logger.info(f"Processing toggle for player {player_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã
        old_power = team.get_team_power()
        current_active_ids = [p['id'] for p in team.active_players]
        
        if player_id in current_active_ids:
            if len(current_active_ids) <= 1:
                logger.info(f"Attempt to remove last active player {player_id}")
                query.answer("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫!", show_alert=True)
                return
            current_active_ids.remove(player_id)
            logger.info(f"Removed player {player_id} from active players")
        else:
            if len(current_active_ids) >= 3:
                logger.info(f"Attempt to add fourth player {player_id}")
                query.answer("–ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞!", show_alert=True)
                return
            current_active_ids.append(player_id)
            logger.info(f"Added player {player_id} to active players")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤
        team.set_active_players(current_active_ids)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã
        new_power = team.get_team_power()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        squad_message = format_squad_message(team)
        power_comparison = format_power_comparison(old_power, new_power)
        full_message = squad_message + power_comparison
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        storage.save_team(user_id, team)
        keyboard = create_squad_keyboard(team)
        query.edit_message_text(full_message, reply_markup=keyboard)
        query.answer()
        
    except Exception as e:
        logger.error(f"Error in handle_toggle_player: {e}", exc_info=True)
        query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

def handle_support_action(update: Update, context: CallbackContext):
    """Handle support club actions"""
    query = update.callback_query
    logger.info(f"Received support action callback: {query.data}")
    
    try:
        user_id = str(query.from_user.id)
        team = storage.get_team(user_id)
        if not team:
            logger.warning(f"Team not found for user {user_id}")
            query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        action = query.data.split('_')[1]
        logger.info(f"Processing support action: {action}")
            
        if action == "money":
            team.add_money(500)
            message = "üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –∫–ª—É–±! +500 –º–æ–Ω–µ—Ç"
            logger.info(f"Added 500 money to team {user_id}")
            team.last_support_time = datetime.now()
            storage.save_team(user_id, team)
            query.edit_message_text(message)
        elif action == "player":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∏–≥—Ä–æ–∫–æ–≤
            players_db = storage.load_players_database()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
            rarity_chances = {
                "common": 0.5,    # 50% —à–∞–Ω—Å
                "rare": 0.3,      # 30% —à–∞–Ω—Å
                "epic": 0.15,     # 15% —à–∞–Ω—Å
                "legendary": 0.05  # 5% —à–∞–Ω—Å
            }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
            rarity = random.choices(
                list(rarity_chances.keys()),
                list(rarity_chances.values())
            )[0]
            
            available_players = [p for p in players_db["players"] if p["rarity"] == rarity]
            if not available_players:
                query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞", show_alert=True)
                return
            
            player = random.choice(available_players)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
            if team.add_player(player):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
                rarity_emoji = {
                    "common": "‚ö™Ô∏è",
                    "rare": "üîµ",
                    "epic": "üü£",
                    "legendary": "üü°"
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ
                message = f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:\n\n"
                message += f"{rarity_emoji[player['rarity']]} {player['name']}\n"
                message += f"–†–µ–¥–∫–æ—Å—Ç—å: {player['rarity'].capitalize()}\n\n"
                message += "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
                message += f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {player['stats']['speed']}\n"
                message += f"üß† –ú–µ–Ω—Ç–∞–ª–∫–∞: {player['stats']['mentality']}\n"
                message += f"‚öΩÔ∏è –£–¥–∞—Ä: {player['stats']['finishing']}\n"
                message += f"üõ° –ó–∞—â–∏—Ç–∞: {player['stats']['defense']}"
                
                team.last_support_time = datetime.now()
                storage.save_team(user_id, team)
                query.edit_message_text(message)
            else:
                query.answer("–í —Å–æ—Å—Ç–∞–≤–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (22)", show_alert=True)
        elif action == "strategy":
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            message = "üìã –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            logger.info("Strategy support action not implemented yet")
            query.edit_message_text(message)
        else:
            message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            logger.warning(f"Unknown support action: {action}")
            query.edit_message_text(message)
        
        query.answer()
        
    except Exception as e:
        logger.error(f"Error in handle_support_action: {e}", exc_info=True)
        query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True) 