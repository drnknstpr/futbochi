from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from storage import storage
import logging

logger = logging.getLogger(__name__)

async def create_squad_keyboard(team):
    """Create keyboard for squad management"""
    keyboard = []
    for player in team.squad:
        is_active = player in team.active_players
        status = "‚úÖ" if is_active else "‚ûï"
        keyboard.append([InlineKeyboardButton(
            f"{status} {player['name']} ({player['rarity']})",
            callback_data=f"toggle_player_{player['id']}"
        )])
    return InlineKeyboardMarkup(keyboard)

async def create_support_keyboard():
    """Create keyboard for club support options"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –î–∞—Ç—å –¥–µ–Ω–µ–≥ (+500)", callback_data="support_money")],
        [InlineKeyboardButton("üë§ –ü–æ–¥–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="support_player")],
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data="support_strategy")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def handle_toggle_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle player toggle in squad"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    team = storage.get_team(user_id)
    if not team:
        logger.warning(f"Team not found for user {user_id}")
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        player_id = int(query.data.split('_')[-1])
        logger.info(f"Processing toggle for player {player_id}")
        
        current_active_ids = [p['id'] for p in team.active_players]
        
        if player_id in current_active_ids:
            if len(current_active_ids) <= 1:
                await query.answer("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫!", show_alert=True)
                return
            current_active_ids.remove(player_id)
            logger.info(f"Removed player {player_id} from active players")
        else:
            if len(current_active_ids) >= 3:
                await query.answer("–ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞!", show_alert=True)
                return
            current_active_ids.append(player_id)
            logger.info(f"Added player {player_id} to active players")
        
        team.set_active_players(current_active_ids)
        storage.save_team(user_id, team)
        
        # Update message with new squad info
        squad_message = format_squad_message(team)
        keyboard = await create_squad_keyboard(team)
        await query.edit_message_text(squad_message, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in handle_toggle_player: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def handle_support_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle support club actions"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    team = storage.get_team(user_id)
    if not team:
        logger.warning(f"Team not found for user {user_id}")
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        action = query.data.split('_')[1]
        
        if not team.can_support():
            await query.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 12 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—É–±–∞", show_alert=True)
            return
            
        if action == "money":
            team.add_money(500)
            message = "üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –∫–ª—É–±! +500 –º–æ–Ω–µ—Ç"
        elif action == "player":
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
            message = "üë§ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        elif action == "strategy":
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            message = "üìã –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        else:
            message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        
        storage.save_team(user_id, team)
        await query.edit_message_text(message)
        
    except Exception as e:
        logger.error(f"Error in handle_support_action: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

def format_squad_message(team):
    """Format squad message with player stats"""
    squad_message = "üìã –í–∞—à —Å–æ—Å—Ç–∞–≤:\n\n"
    squad_message += "‚öúÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:\n"
    squad_message += "‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å\n"
    squad_message += "üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å\n"
    squad_message += "‚öΩÔ∏è –£–¥–∞—Ä\n"
    squad_message += "üõ° –ó–∞—â–∏—Ç–∞\n\n"
    
    squad_message += "üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
    for player in team.active_players:
        stats = player['stats']
        squad_message += (
            f"‚Ä¢ {player['name']} ({player['rarity']})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )
    
    squad_message += "\nüìù –ü–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤:\n"
    bench = [p for p in team.squad if p not in team.active_players]
    for player in bench:
        stats = player['stats']
        squad_message += (
            f"‚Ä¢ {player['name']} ({player['rarity']})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )
    
    return squad_message 