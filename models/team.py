from typing import List, Dict
import json
from datetime import datetime, timedelta
import random

class Team:
    def __init__(self, name: str):
        self.name = name
        self.money = 1000
        self.points = 0
        self.active_players = []  # –¥–æ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.squad = []  # –¥–æ 22 –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–æ
        self.last_support_time = None
        self.last_match_time = None
        self.strategy = None

    def can_play_match(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞—Ç—å –º–∞—Ç—á (–∫—É–ª–¥–∞—É–Ω 1 —á–∞—Å)"""
        if not self.last_match_time:
            return True
        cooldown = timedelta(hours=1)
        return datetime.now() - self.last_match_time >= cooldown

    def can_support(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–± (–∫—É–ª–¥–∞—É–Ω 12 —á–∞—Å–æ–≤)"""
        if not self.last_support_time:
            return True
        cooldown = timedelta(hours=12)
        return datetime.now() - self.last_support_time >= cooldown

    def add_player(self, player: Dict) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
        if len(self.squad) >= 22:
            return False
        self.squad.append(player)
        return True

    def remove_player(self, player_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
        for player in self.squad:
            if player['id'] == player_id:
                self.squad.remove(player)
                if player in self.active_players:
                    self.active_players.remove(player)
                return True
        return False

    def set_active_players(self, player_ids: List[int]) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        if len(player_ids) > 3:
            return False
        
        active = []
        for pid in player_ids:
            for player in self.squad:
                if player['id'] == pid:
                    active.append(player)
                    break
        
        if len(active) == len(player_ids):
            self.active_players = active
            return True
        return False

    def get_team_power(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–Ω—É—é —Å–∏–ª—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        power = {
            "speed": 0,
            "mentality": 0,
            "finishing": 0,
            "defense": 0
        }
        
        for player in self.active_players:
            for param, value in player['stats'].items():
                if param in power:
                    power[param] += value
        
        return power

    def support_club(self, action: str) -> tuple[bool, str]:
        """–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–± –æ–¥–Ω–∏–º –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π"""
        if not self.can_support():
            return False, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 12 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—É–±–∞"

        if action == "money":
            self.money += 500
            msg = "–ü–æ–ª—É—á–µ–Ω–æ 500 –º–æ–Ω–µ—Ç"
        elif action == "player":
            # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±—É–¥–µ—Ç –≤ handler
            msg = "–ì–æ—Ç–æ–≤—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞"
        elif action == "strategy":
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
        else:
            return False, "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"

        self.last_support_time = datetime.now()
        return True, msg

    def play_match(self, difficulty: str) -> tuple[bool, str, int, int]:
        """–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á"""
        if not self.can_play_match():
            return False, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º–∞—Ç—á–µ–º", 0, 0

        if len(self.active_players) == 0:
            return False, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!", 0, 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã
        team_power = self.get_team_power()
        total_power = sum(team_power.values()) / 4  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulties = {
            "easy": {"required_power": 50, "money": 200, "points": 1, "win_chance": 0.7},
            "medium": {"required_power": 65, "money": 400, "points": 3, "win_chance": 0.5},
            "hard": {"required_power": 80, "money": 600, "points": 5, "win_chance": 0.3}
        }

        settings = difficulties[difficulty]
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–±–µ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥—ã
        power_bonus = max(0, (total_power - settings["required_power"]) / 100)
        win_chance = min(0.9, settings["win_chance"] + power_bonus)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞
        if random.random() < win_chance:
            self.money += settings["money"]
            self.points += settings["points"]
            self.last_match_time = datetime.now()
            
            # –ë–æ–Ω—É—Å –∑–∞ –±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å–∏–ª–µ
            if total_power > settings["required_power"] + 20:
                bonus_money = int((total_power - settings["required_power"]) * 2)
                bonus_points = 1 if difficulty == "hard" else 0
                self.money += bonus_money
                self.points += bonus_points
                return True, f"üèÜ –ü–æ–±–µ–¥–∞!\n\nüí™ –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É:\n+{bonus_money} –º–æ–Ω–µ—Ç\n+{bonus_points} –æ—á–∫–æ–≤", settings["money"] + bonus_money, settings["points"] + bonus_points
            
            return True, "üèÜ –ü–æ–±–µ–¥–∞!", settings["money"], settings["points"]
        else:
            consolation_money = settings["money"] // 4
            self.money += consolation_money
            self.last_match_time = datetime.now()
            return True, f"üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ\n\n–£—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: {consolation_money} –º–æ–Ω–µ—Ç", consolation_money, 0

    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            "name": self.name,
            "money": self.money,
            "points": self.points,
            "active_players": self.active_players,
            "squad": self.squad,
            "last_support_time": self.last_support_time.isoformat() if self.last_support_time else None,
            "last_match_time": self.last_match_time.isoformat() if self.last_match_time else None,
            "strategy": self.strategy
        }

    @classmethod
    def from_dict(cls, data: Dict) -> 'Team':
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        team = cls(data["name"])
        team.money = data["money"]
        team.points = data["points"]
        team.active_players = data["active_players"]
        team.squad = data["squad"]
        team.last_support_time = datetime.fromisoformat(data["last_support_time"]) if data["last_support_time"] else None
        team.last_match_time = datetime.fromisoformat(data["last_match_time"]) if data["last_match_time"] else None
        team.strategy = data["strategy"]
        return team 