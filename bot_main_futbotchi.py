# main bot entry point

import os
import logging
import random
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from storage import storage
from models.team import Team

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Load environment variables
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# Debug print
print(f"Using token: {TOKEN}")

# Keyboard layouts
MAIN_KEYBOARD = ReplyKeyboardMarkup([
    ['üíº –°–æ—Å—Ç–∞–≤', 'üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±'],
    ['üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞', 'üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á'],
    ['üèÜ –¢–æ–ø', 'üßë –ü—Ä–æ—Ñ–∏–ª—å'],
    ['üìÖ –°–æ–±—ã—Ç–∏—è']
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    user_id = str(user.id)
    
    team = storage.get_team(user_id)
    if not team:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        team = Team(f"FC {user.first_name}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players_db = storage.load_players_database()
        starter_players = [
            next(p for p in players_db["players"] if p["name"] == "–õ—É–∫–∞–∫—É"),
            next(p for p in players_db["players"] if p["name"] == "–ú–∞–∫—Ç–æ–º–∏–Ω–µ–π"),
            next(p for p in players_db["players"] if p["name"] == "–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É")
        ]
        for player in starter_players:
            team.add_player(player)
        team.set_active_players([p["id"] for p in starter_players])
        storage.save_team(user_id, team)

    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Tamagotchi! ‚öΩ\n"
        "–°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –º–µ—á—Ç—ã –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!\n\n"
        "üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üíº –°–æ—Å—Ç–∞–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–º\n"
        "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–± - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã\n"
        "üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞ - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á - –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏ –∏ –¥–µ–Ω—å–≥–∏\n"
        "üèÜ –¢–æ–ø - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "üßë –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ\n"
        "üìÖ –°–æ–±—ã—Ç–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    )
    
    await update.message.reply_text(welcome_message, reply_markup=MAIN_KEYBOARD)

async def show_squad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    squad_message = "üìã –í–∞—à —Å–æ—Å—Ç–∞–≤:\n\n"
    squad_message += "üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
    for player in team.active_players:
        stats = player['stats']
        squad_message += (
            f"‚Ä¢ {player['name']} ({player['rarity']})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )
    
    squad_message += "\nüìù –ó–∞–ø–∞—Å–Ω—ã–µ:\n"
    bench = [p for p in team.squad if p not in team.active_players]
    for player in bench:
        stats = player['stats']
        squad_message += (
            f"‚Ä¢ {player['name']} ({player['rarity']})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–º
    keyboard = []
    for player in team.squad:
        is_active = player in team.active_players
        status = "‚úÖ" if is_active else "‚ûï"
        keyboard.append([InlineKeyboardButton(
            f"{status} {player['name']} ({player['rarity']})",
            callback_data=f"toggle_player_{player['id']}"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(squad_message, reply_markup=reply_markup)

async def toggle_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    team = storage.get_team(user_id)
    if not team:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    player_id = int(query.data.split('_')[-1])
    current_active_ids = [p['id'] for p in team.active_players]
    
    if player_id in current_active_ids:
        current_active_ids.remove(player_id)
    else:
        if len(current_active_ids) >= 3:
            await query.edit_message_text("–ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞!")
            return
        current_active_ids.append(player_id)
    
    team.set_active_players(current_active_ids)
    storage.save_team(user_id, team)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–∞–≤–æ–º
    squad_message = "üìã –í–∞—à —Å–æ—Å—Ç–∞–≤:\n\n"
    squad_message += "üåü –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n"
    for player in team.active_players:
        stats = player['stats']
        squad_message += (
            f"‚Ä¢ {player['name']} ({player['rarity']})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )
    
    squad_message += "\nüìù –ó–∞–ø–∞—Å–Ω—ã–µ:\n"
    bench = [p for p in team.squad if p not in team.active_players]
    for player in bench:
        stats = player['stats']
        squad_message += (
            f"‚Ä¢ {player['name']} ({player['rarity']})\n"
            f"  ‚ö°Ô∏è {stats['speed']} üß† {stats['mentality']} "
            f"‚öΩÔ∏è {stats['finishing']} üõ° {stats['defense']}\n"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for player in team.squad:
        is_active = player in team.active_players
        status = "‚úÖ" if is_active else "‚ûï"
        keyboard.append([InlineKeyboardButton(
            f"{status} {player['name']} ({player['rarity']})",
            callback_data=f"toggle_player_{player['id']}"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(squad_message, reply_markup=reply_markup)

async def support_club(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if not team.can_support():
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 12 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—É–±–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üí∞ –î–∞—Ç—å –¥–µ–Ω–µ–≥ (+500)", callback_data="support_money")],
        [InlineKeyboardButton("üë§ –ü–æ–¥–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="support_player")],
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data="support_strategy")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª—É–±–∞:",
        reply_markup=reply_markup
    )

async def support_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª—É–±–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    team = storage.get_team(user_id)
    if not team:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    action = query.data.split('_')[1]
    success, message = team.support_club(action)
    
    if success:
        if action == "player":
            # –î–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            players_db = storage.load_players_database()
            rarity = random.choices(
                list(players_db["rarity_chances"].keys()),
                list(players_db["rarity_chances"].values())
            )[0]
            available_players = [p for p in players_db["players"] if p["rarity"] == rarity]
            if available_players:
                player = random.choice(available_players)
                team.add_player(player)
                message = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏ {player['name']} ({player['rarity']})!"
        
        storage.save_team(user_id, team)
        await query.edit_message_text(message)
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def buy_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if team.money < 1000:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ 1000 –º–æ–Ω–µ—Ç.")
        return

    players_db = storage.load_players_database()
    rarity = random.choices(
        list(players_db["rarity_chances"].keys()),
        list(players_db["rarity_chances"].values())
    )[0]
    available_players = [p for p in players_db["players"] if p["rarity"] == rarity]
    
    if available_players:
        player = random.choice(available_players)
        team.money -= 1000
        team.add_player(player)
        storage.save_team(user_id, team)
        
        message = (
            f"üéâ –í—ã –∫—É–ø–∏–ª–∏ {player['name']} ({player['rarity']})!\n"
            f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {player['stats']['speed']}\n"
            f"üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å: {player['stats']['mentality']}\n"
            f"‚öΩÔ∏è –£–¥–∞—Ä: {player['stats']['finishing']}\n"
            f"üõ° –ó–∞—â–∏—Ç–∞: {player['stats']['defense']}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–Ω–µ–≥: {team.money}"
        )
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def play_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if not team.can_play_match():
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º–∞—Ç—á–µ–º")
        return

    if len(team.active_players) == 0:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ!")
        return

    keyboard = [
        [InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π –º–∞—Ç—á", callback_data="match_easy")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π –º–∞—Ç—á", callback_data="match_medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π –º–∞—Ç—á", callback_data="match_hard")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞:\n\n"
        "üü¢ –õ–µ–≥–∫–∏–π: 100 –º–æ–Ω–µ—Ç, 1 –æ—á–∫–æ\n"
        "üü° –°—Ä–µ–¥–Ω–∏–π: 300 –º–æ–Ω–µ—Ç, 3 –æ—á–∫–∞\n"
        "üî¥ –°–ª–æ–∂–Ω—ã–π: 500 –º–æ–Ω–µ—Ç, 5 –æ—á–∫–æ–≤\n\n"
        "–°–∏–ª–∞ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {team.get_team_power()['speed']}\n"
        f"üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å: {team.get_team_power()['mentality']}\n"
        f"‚öΩÔ∏è –£–¥–∞—Ä: {team.get_team_power()['finishing']}\n"
        f"üõ° –ó–∞—â–∏—Ç–∞: {team.get_team_power()['defense']}"
    )
    
    await update.message.reply_text(message, reply_markup=reply_markup)

async def match_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    team = storage.get_team(user_id)
    if not team:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    difficulty = query.data.split('_')[1]
    success, result, money, points = team.play_match(difficulty)
    
    if success:
        message = (
            f"{result}\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ:\n"
            f"üí∞ {money} –º–æ–Ω–µ—Ç\n"
            f"üèÜ {points} –æ—á–∫–æ–≤"
        )
        storage.save_team(user_id, team)
        await query.edit_message_text(message)
    else:
        await query.edit_message_text(result)

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    teams = storage.get_all_teams()
    sorted_teams = sorted(
        teams.items(),
        key=lambda x: x[1].points,
        reverse=True
    )

    top_message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (user_id, team) in enumerate(sorted_teams[:10], 1):
        top_message += f"{i}. {team.name}: {team.points} –æ—á–∫–æ–≤\n"

    await update.message.reply_text(top_message)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥—ã"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    profile_message = (
        f"üßë –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥—ã {team.name}\n\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {team.money}\n"
        f"üèÜ –û—á–∫–∏: {team.points}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ: {len(team.squad)}/22\n"
        f"üåü –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(team.active_players)}/3\n\n"
        "–°–∏–ª–∞ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {team.get_team_power()['speed']}\n"
        f"üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ—Å—Ç—å: {team.get_team_power()['mentality']}\n"
        f"‚öΩÔ∏è –£–¥–∞—Ä: {team.get_team_power()['finishing']}\n"
        f"üõ° –ó–∞—â–∏—Ç–∞: {team.get_team_power()['defense']}"
    )

    await update.message.reply_text(profile_message)

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è"""
    await update.message.reply_text(
        "üìÖ –°–æ–±—ã—Ç–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üíº –°–æ—Å—Ç–∞–≤":
        await show_squad(update, context)
    elif text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±":
        await support_club(update, context)
    elif text == "üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞":
        await buy_player(update, context)
    elif text == "üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á":
        await play_match(update, context)
    elif text == "üèÜ –¢–æ–ø":
        await show_top(update, context)
    elif text == "üßë –ü—Ä–æ—Ñ–∏–ª—å":
        await show_profile(update, context)
    elif text == "üìÖ –°–æ–±—ã—Ç–∏—è":
        await show_events(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(toggle_player, pattern="^toggle_player_"))
    application.add_handler(CallbackQueryHandler(support_callback, pattern="^support_"))
    application.add_handler(CallbackQueryHandler(match_callback, pattern="^match_"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
