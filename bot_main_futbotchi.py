# main bot entry point

import os
import logging
import random
import json
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    Filters,
    CallbackContext
)
from storage import storage
from models.team import Team
from handlers.button_handlers import (
    handle_toggle_player,
    handle_support_action,
    create_support_keyboard,
    create_squad_keyboard,
    format_squad_message
)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

# Create logger
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

if not TOKEN:
    raise ValueError("No token found! Make sure you have TELEGRAM_TOKEN in your .env file")

# Debug print
logger.info(f"Starting bot with token: {TOKEN}")

# Constants
PLAYER_COST = 1000  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä–æ–∫–∞

# Keyboard layouts
MAIN_KEYBOARD = ReplyKeyboardMarkup([
    ['üíº –°–æ—Å—Ç–∞–≤', 'üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±'],
    ['üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞', 'üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á'],
    ['üèÜ –¢–æ–ø', 'üßë –ü—Ä–æ—Ñ–∏–ª—å'],
    ['‚ùì –ù–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∑–∞ –±–æ—Ç']
], resize_keyboard=True)

def get_bot_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ—Ç–µ"""
    return (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Futbochi! ‚öΩÔ∏è\n\n"
        "–í —ç—Ç–æ–π –∏–≥—Ä–µ —Ç—ã —Å–æ–∑–¥–∞–µ—à—å —Å–≤–æ—é —Ñ—É—Ç–±–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É:\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∞–π –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ üì¶\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π —Å–æ—Å—Ç–∞–≤–æ–º üë•\n"
        "‚Ä¢ –ò–≥—Ä–∞–π –º–∞—Ç—á–∏ ‚öΩÔ∏è\n"
        "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π –∏–≥—Ä–æ–∫–æ–≤ üí™\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ –∏ –º–æ–Ω–µ—Ç—ã üèÜ\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üíº –°–æ—Å—Ç–∞–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏\n"
        "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–± - –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã\n"
        "üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞ - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
        "üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á - —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã\n"
        "üèÜ –¢–æ–ø - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "üßë –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ\n"
        "üìÖ –°–æ–±—ã—Ç–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n"
        "–£–¥–∞—á–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–µ–π —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∏–º–ø–µ—Ä–∏–∏! üèÜ"
    )

def start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    user_id = str(user.id)
    
    team = storage.get_team(user_id)
    if not team:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        team = Team(f"FC {user.first_name}")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players_db = storage.load_players_database()
        
        # –ù–∞—Ö–æ–¥–∏–º common –∏–≥—Ä–æ–∫–æ–≤
        common_players = [p for p in players_db["players"] if p["rarity"] == "common"]
        # –ù–∞—Ö–æ–¥–∏–º rare –∏–≥—Ä–æ–∫–æ–≤
        rare_players = [p for p in players_db["players"] if p["rarity"] == "rare"]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        starter_players = random.sample(common_players, 2) + random.sample(rare_players, 1)
        
        for player in starter_players:
            team.add_player(player)
        team.set_active_players([p["id"] for p in starter_players])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        storage.save_team(user_id, team)
        
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"{get_bot_info()}\n\n"
            "–Ø —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–¥–∞–ª —Ç–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:\n"
            f"‚Ä¢ {starter_players[0]['name']} (Common)\n"
            f"‚Ä¢ {starter_players[1]['name']} (Common)\n"
            f"‚Ä¢ {starter_players[2]['name']} (Rare)"
        )
    else:
        welcome_message = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n\n"
            "–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∂–¥–µ—Ç —Ç–µ–±—è! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    with open('media/welcome.png', 'rb') as photo:
        update.message.reply_photo(
            photo=photo,
            caption=welcome_message,
            reply_markup=MAIN_KEYBOARD,
            parse_mode='HTML'
        )

def show_squad(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    squad_message = format_squad_message(team)
    keyboard = create_squad_keyboard(team)
    update.message.reply_text(squad_message, reply_markup=keyboard)

def support_club(update: Update, context: CallbackContext):
    """–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if not team.can_support():
        update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—É–±–∞")
        return

    keyboard = create_support_keyboard()
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª—É–±–∞:",
        reply_markup=keyboard
    )

def create_sirena_keyboard(bonus_type: str):
    """Create keyboard for SirenaBet bonus"""
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å", url="sirena.team")
        ]
    ])
    return keyboard

def buy_player(update: Update, context: CallbackContext):
    """–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    user = update.effective_user
    user_id = str(user.id)
    
    team = storage.get_team(user_id)
    if not team:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∫—É–ø–æ–∫
    if not team.can_buy_player():
        if team.can_use_sirena_player_bonus():
            update.message.reply_text(
                "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç 3 –∏–≥—Ä–æ–∫–∞ –∑–∞ 10 –º–∏–Ω—É—Ç!\n"
                "–ù–æ ¬´–°–∏—Ä–µ–Ω–∞–ë–µ—Ç¬ª —Å–ø–µ—à–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å!\n"
                "–ù–∞–∂–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Å–¥–µ–ª–∞–π –¥–µ–ø–æ–∑–∏—Ç, –∏ –ø–æ–ª—É—á–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.",
                reply_markup=create_sirena_keyboard("player")
            )
            return
        else:
            update.message.reply_text(
                "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫ (4 –∏–≥—Ä–æ–∫–∞ –∑–∞ 10 –º–∏–Ω—É—Ç).\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–µ–Ω–µ–≥
    if team.money < PLAYER_COST:
        if team.can_use_sirena_no_money_bonus():
            update.message.reply_text(
                "–ö–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏! –ù–æ ¬´–°–∏—Ä–µ–Ω–∞–ë–µ—Ç¬ª —Å–ø–µ—à–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å!\n"
                "–ù–∞–∂–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Å–¥–µ–ª–∞–π –¥–µ–ø–æ–∑–∏—Ç, –∏ –ø–æ–ª—É—á–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.",
                reply_markup=create_sirena_keyboard("nomoney")
            )
            return
        else:
            update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä–æ–∫–∞.\n"
                f"–ù—É–∂–Ω–æ: {PLAYER_COST} ü™ô\n–£ –≤–∞—Å –µ—Å—Ç—å: {team.money} ü™ô"
            )
            return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∏–≥—Ä–æ–∫–æ–≤
    players_db = storage.load_players_database()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity = random.choices(
        list(players_db["rarity_chances"].keys()),
        list(players_db["rarity_chances"].values())
    )[0]
    
    available_players = [p for p in players_db["players"] if p["rarity"] == rarity]
    if not available_players:
        update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞")
        return
    
    player = random.choice(available_players)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
    team.add_player(player)
    team.add_player_purchase()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
    team.money -= PLAYER_COST
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_emoji = {
        "common": "‚ö™Ô∏è",
        "rare": "üîµ",
        "epic": "üü£",
        "legendary": "üü°"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—É–ø–ª–µ–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ
    message = f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:\n\n"
    message += f"{rarity_emoji[player['rarity']]} {player['name']}\n"
    message += f"–†–µ–¥–∫–æ—Å—Ç—å: {player['rarity'].capitalize()}\n\n"
    message += "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
    message += f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {player['stats']['speed']}\n"
    message += f"üß† –ú–µ–Ω—Ç–∞–ª–∫–∞: {player['stats']['mentality']}\n"
    message += f"‚öΩÔ∏è –£–¥–∞—Ä: {player['stats']['finishing']}\n"
    message += f"üõ° –ó–∞—â–∏—Ç–∞: {player['stats']['defense']}"
    
    storage.save_team(user_id, team)
    update.message.reply_text(message)

def calculate_team_strength(team_power):
    """Calculate team strength based on stats"""
    # Weights for different stats
    weights = {
        'speed': 0.25,
        'mentality': 0.2,
        'finishing': 0.35,
        'defense': 0.2
    }
    
    # Calculate weighted strength
    strength = sum(team_power[stat] * weight for stat, weight in weights.items())
    return strength / 100  # Convert to 0-1 range

def calculate_team_rating(team_power):
    """Calculate overall team rating based on power stats"""
    # –í–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    weights = {
        'speed': 0.25,
        'mentality': 0.2,
        'finishing': 0.35,
        'defense': 0.2
    }
    
    rating = sum(team_power[stat] * weight for stat, weight in weights.items())
    return round(rating, 1)

def generate_match_events(team, opponent, difficulty):
    """Generate match events and calculate the result"""
    try:
        # Load match data
        with open('data/match_data.json', 'r', encoding='utf-8') as f:
            match_data = json.load(f)
        
        # Initialize variables
        events = []
        team_goals = 0
        team_power = team.get_team_power()
        team_rating = calculate_team_rating(team_power)
        
        # Get opponent strength from data
        opponent_strength = opponent['strength']
        opponent_rating = opponent_strength * 10  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∞–∫–æ–π –∂–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ —É –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥–æ–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —É–¥–∞—Ä–∞ –∏ –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        finishing_factor = team_power['finishing'] / 100  # 0-1
        rating_factor = team_rating / 10  # 0-1
        
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –≥–æ–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_goal_chance = {
            'easy': 0.4,    # 40% –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –Ω–∞ –ª–µ–≥–∫–æ–º
            'medium': 0.35,  # 35% –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º
            'hard': 0.3     # 30% –Ω–∞ —Å–ª–æ–∂–Ω–æ–º
        }
        
        base_goal_chance = difficulty_goal_chance[difficulty]
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –≥–æ–ª–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —É–¥–∞—Ä, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        team_goal_chance = base_goal_chance * (0.6 * finishing_factor + 0.4 * rating_factor)
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –∞—Ç–∞–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å –≥–æ–ª–∞
        num_attacks = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫
        for _ in range(num_attacks):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player = random.choice(team.active_players)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
            if random.random() < team_goal_chance:
                # –ì–æ–ª!
                action = random.choice([a for a in match_data['match_actions']['positive'] if a['is_goal']])
                team_goals += 1
                events.append(f"{player['name']}... {action['action']}")
            else:
                # –ù–µ—É–¥–∞—á–Ω–∞—è –∞—Ç–∞–∫–∞
                if random.random() < 0.7:  # 70% —à–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    action = random.choice([a for a in match_data['match_actions']['positive'] if not a['is_goal']])
                else:
                    action = random.choice(match_data['match_actions']['negative'])
                events.append(f"{player['name']}... {action['action']}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        opponent_goals = 0
        opponent_attacks = 4  # –ú–µ–Ω—å—à–µ –∞—Ç–∞–∫ —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        
        # –ó–∞—â–∏—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –≤–ª–∏—è–µ—Ç –Ω–∞ —à–∞–Ω—Å—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        defense_factor = team_power['defense'] / 100
        opponent_goal_chance = opponent_strength * (1 - defense_factor * 0.5)  # –ó–∞—â–∏—Ç–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ 50% —à–∞–Ω—Å–æ–≤
        
        for _ in range(opponent_attacks):
            if random.random() < opponent_goal_chance:
                opponent_goals += 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if team_goals > opponent_goals:
            result = f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±—ã–≥—Ä–∞–ª–∞ ¬´{opponent['name']}¬ª —Å–æ —Å—á—ë—Ç–æ–º {team_goals}:{opponent_goals}!"
        elif team_goals < opponent_goals:
            result = f"üòî –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ ¬´{opponent['name']}¬ª —Å–æ —Å—á—ë—Ç–æ–º {team_goals}:{opponent_goals}"
        else:
            result = f"ü§ù –ù–∏—á—å—è —Å ¬´{opponent['name']}¬ª {team_goals}:{opponent_goals}"
        
        return {
            'events': events,
            'result': result,
            'team_goals': team_goals,
            'opponent_goals': opponent_goals,
            'team_strength': team_rating / 10,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ 0-1
            'opponent_strength': opponent_strength,
            'difficulty': difficulty
        }
        
    except Exception as e:
        logger.error(f"Error generating match events: {e}", exc_info=True)
        raise

def create_match_difficulty_keyboard():
    """Create keyboard for match difficulty selection"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö™Ô∏è –õ–µ–≥–∫–∏–π –º–∞—Ç—á (–Ω–∞–≥—Ä–∞–¥–∞: 200-400 –º–æ–Ω–µ—Ç)", callback_data="match_easy")],
        [InlineKeyboardButton("üîµ –°—Ä–µ–¥–Ω–∏–π –º–∞—Ç—á (–Ω–∞–≥—Ä–∞–¥–∞: 400-800 –º–æ–Ω–µ—Ç)", callback_data="match_medium")],
        [InlineKeyboardButton("üî¥ –°–ª–æ–∂–Ω—ã–π –º–∞—Ç—á (–Ω–∞–≥—Ä–∞–¥–∞: 800-1500 –º–æ–Ω–µ—Ç)", callback_data="match_hard")]
    ])
    return keyboard

def play_match(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if len(team.active_players) == 0:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –º–∞—Ç—á–µ–π
    if not team.can_play_match():
        if team.can_use_sirena_match_bonus():
            update.message.reply_text(
                "–õ–∏–º–∏—Ç –º–∞—Ç—á–µ–π 3 –º–∞—Ç—á–∞ –∑–∞ 10 –º–∏–Ω—É—Ç!\n"
                "–ù–æ ¬´–°–∏—Ä–µ–Ω–∞–ë–µ—Ç¬ª —Å–ø–µ—à–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å!\n"
                "–ù–∞–∂–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Å–¥–µ–ª–∞–π –¥–µ–ø–æ–∑–∏—Ç, –∏ —Å—ã–≥—Ä–∞–π –µ—â–µ 1 –º–∞—Ç—á.",
                reply_markup=create_sirena_keyboard("match")
            )
            return
        else:
            update.message.reply_text(
                "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–∞—Ç—á–µ–π (3 –º–∞—Ç—á–∞ –∑–∞ 10 –º–∏–Ω—É—Ç).\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            return

    keyboard = create_match_difficulty_keyboard()
    update.message.reply_text(
        "üèü –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞:\n\n"
        "‚ö™Ô∏è –õ–µ–≥–∫–∏–π –º–∞—Ç—á - –ø—Ä–æ—Ç–∏–≤ —Å–ª–∞–±—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "üîµ –°—Ä–µ–¥–Ω–∏–π –º–∞—Ç—á - –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è\n"
        "üî¥ –°–ª–æ–∂–Ω—ã–π –º–∞—Ç—á - –ø—Ä–æ—Ç–∏–≤ —Ç–æ–ø-–∫–ª—É–±–æ–≤\n\n"
        "–ß–µ–º —Å–ª–æ–∂–Ω–µ–µ –º–∞—Ç—á, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É!",
        reply_markup=keyboard
    )

def calculate_match_probabilities(team_rating, opponent_strength):
    """Calculate win/draw/lose probabilities based on team ratings"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–ª—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–∞–∫ —É –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞)
    opponent_rating = opponent_strength * 10  # –°–∏–ª–∞ 0.8 = —Ä–µ–π—Ç–∏–Ω–≥ 8.0
    
    # –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    rating_diff = team_rating - opponent_rating
    
    # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    if rating_diff >= 2:  # –ù–∞–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ
        win_prob = 0.7
        draw_prob = 0.2
        lose_prob = 0.1
    elif rating_diff >= 1:  # –ù–µ–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ
        win_prob = 0.5
        draw_prob = 0.3
        lose_prob = 0.2
    elif rating_diff >= -1:  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã
        win_prob = 0.35
        draw_prob = 0.3
        lose_prob = 0.35
    elif rating_diff >= -2:  # –ù–µ–º–Ω–æ–≥–æ —Å–ª–∞–±–µ–µ
        win_prob = 0.2
        draw_prob = 0.3
        lose_prob = 0.5
    else:  # –ù–∞–º–Ω–æ–≥–æ —Å–ª–∞–±–µ–µ
        win_prob = 0.1
        draw_prob = 0.2
        lose_prob = 0.7
    
    return {
        'win': round(win_prob * 100),
        'draw': round(draw_prob * 100),
        'lose': round(lose_prob * 100)
    }

def handle_match_difficulty(update: Update, context: CallbackContext):
    """Handle match difficulty selection"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    difficulty = query.data.split('_')[1]  # match_easy -> easy
    
    logger.info(f"Starting match with difficulty: {difficulty} for user: {user_id}")
    
    team = storage.get_team(user_id)
    if not team:
        logger.error(f"Team not found for user {user_id}")
        query.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        # Load match data
        logger.info("Loading match data...")
        with open('data/match_data.json', 'r', encoding='utf-8') as f:
            match_data = json.load(f)
        
        # Select random opponent based on difficulty
        logger.info(f"Selecting opponent for difficulty: {difficulty}")
        if difficulty not in match_data['opponent_teams']:
            logger.error(f"Invalid difficulty level: {difficulty}")
            raise ValueError(f"Invalid difficulty level: {difficulty}")
            
        opponent = random.choice(match_data['opponent_teams'][difficulty])
        logger.info(f"Selected opponent: {opponent['name']}")
        
        # Calculate team rating and probabilities
        logger.info("Calculating team power and probabilities...")
        team_power = team.get_team_power()
        team_rating = calculate_team_rating(team_power)
        probabilities = calculate_match_probabilities(team_rating, opponent['strength'])
        
        # Edit message to show match preview
        preview_message = (
            f"‚öîÔ∏è –ü—Ä–µ–¥–º–∞—Ç—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            f"üë• {team.name}\n"
            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {team_rating}\n\n"
            f"üë• {opponent['name']}\n"
            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {round(opponent['strength'] * 10, 1)}\n\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–∞:\n"
            f"‚úÖ –ü–æ–±–µ–¥–∞: {probabilities['win']}%\n"
            f"ü§ù –ù–∏—á—å—è: {probabilities['draw']}%\n"
            f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ: {probabilities['lose']}%\n\n"
            f"‚è≥ –ú–∞—Ç—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è..."
        )
        query.edit_message_text(preview_message)
        
        # Generate and process match events
        logger.info("Generating match events...")
        match_result = generate_match_events(team, opponent, difficulty)
        
        # Send match events with delay
        logger.info("Sending match events...")
        for event in match_result['events']:
            context.bot.send_message(chat_id=update.effective_chat.id, text=event)
            time.sleep(2)  # 2-second delay between events
        
        # Send final result
        context.bot.send_message(chat_id=update.effective_chat.id, text=match_result['result'])
        
        # Calculate rewards based on difficulty and opponent strength
        logger.info("Calculating rewards...")
        reward_ranges = {
            'easy': (200, 400),
            'medium': (400, 800),
            'hard': (800, 1500)
        }
        
        base_min, base_max = reward_ranges[difficulty]
        strength_factor = match_result['opponent_strength']
        
        if match_result['team_goals'] > match_result['opponent_goals']:
            # Win reward
            reward = int(base_min + (base_max - base_min) * strength_factor)
            team.add_points(3)
            team.add_money(reward)
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É: +{reward} –º–æ–Ω–µ—Ç"
            )
        elif match_result['team_goals'] == match_result['opponent_goals']:
            # Draw reward
            reward = int((base_min + (base_max - base_min) * strength_factor) * 0.4)  # 40% of win reward
            team.add_points(1)
            team.add_money(reward)
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –Ω–∏—á—å—é: +{reward} –º–æ–Ω–µ—Ç"
            )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—ã–≥—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á
        logger.info("Saving match result...")
        team.add_match_played()
        storage.save_team(user_id, team)
        logger.info("Match completed successfully")
        
    except Exception as e:
        logger.error(f"Error in handle_match_difficulty: {str(e)}", exc_info=True)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞: {str(e)}"
        )

def show_top(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    teams = storage.get_all_teams()
    sorted_teams = sorted(
        teams.items(),
        key=lambda x: x[1].points,
        reverse=True
    )

    top_message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (user_id, team) in enumerate(sorted_teams[:10], 1):
        top_message += f"{i}. {team.name}: {team.points} –æ—á–∫–æ–≤\n"

    update.message.reply_text(top_message)

def show_profile(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥—ã"""
    user_id = str(update.effective_user.id)
    team = storage.get_team(user_id)
    if not team:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    profile_message = (
        f"üßë –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥—ã {team.name}\n\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {team.money}\n"
        f"üèÜ –û—á–∫–∏: {team.points}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ: {len(team.squad)}/22\n"
        f"üåü –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(team.active_players)}/3\n\n"
        "–°–∏–ª–∞ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {team.get_team_power()['speed']}\n"
        f"üß† –ú–µ–Ω—Ç–∞–ª–∫–∞: {team.get_team_power()['mentality']}\n"
        f"‚öΩÔ∏è –£–¥–∞—Ä: {team.get_team_power()['finishing']}\n"
        f"üõ° –ó–∞—â–∏—Ç–∞: {team.get_team_power()['defense']}"
    )

    update.message.reply_text(profile_message)

def handle_text(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üíº –°–æ—Å—Ç–∞–≤":
        show_squad(update, context)
    elif text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±":
        support_club(update, context)
    elif text == "üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞":
        buy_player(update, context)
    elif text == "üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á":
        play_match(update, context)
    elif text == "üèÜ –¢–æ–ø":
        show_top(update, context)
    elif text == "üßë –ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(update, context)
    elif text == "‚ùì –ù–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∑–∞ –±–æ—Ç":
        update.message.reply_text(
            get_bot_info(),
            reply_markup=MAIN_KEYBOARD
        )

def handle_sirena_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–±—Ä–∞—Ç—å –æ—Ç SirenaBet"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    action_type = query.data.split('_')[1]  # sirena_player, sirena_match, sirena_nomoney
    
    team = storage.get_team(user_id)
    if not team:
        query.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å
        if action_type == 'match' and not team.can_use_sirena_match_bonus():
            query.answer("–ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return
        elif action_type == 'player' and not team.can_use_sirena_player_bonus():
            query.answer("–ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return
        elif action_type == 'nomoney' and not team.can_use_sirena_no_money_bonus():
            query.answer("–ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return

        if action_type == 'match':
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ –Ω–∞ –º–∞—Ç—á
            team.use_sirena_match_bonus()
            storage.save_team(user_id, team)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞
            query.edit_message_text(
                "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –º–∞—Ç—á –æ—Ç SirenaBet!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –º–∞—Ç—á."
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –±–æ–Ω—É—Å–æ–≤...
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∏–≥—Ä–æ–∫–æ–≤
        players_db = storage.load_players_database()
        
        # –î–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ common –∏–ª–∏ rare
        available_players = [p for p in players_db["players"] if p["rarity"] in ["common", "rare"]]
        if not available_players:
            query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = random.choice(available_players)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
        team.add_player(player)
        
        # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞
        if action_type == 'player':
            team.use_sirena_player_bonus()
        else:  # nomoney
            team.use_sirena_no_money_bonus()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarity_emoji = {
            "common": "‚ö™Ô∏è",
            "rare": "üîµ",
            "epic": "üü£",
            "legendary": "üü°"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        message = f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç SirenaBet:\n\n"
        message += f"{rarity_emoji[player['rarity']]} {player['name']}\n"
        message += f"–†–µ–¥–∫–æ—Å—Ç—å: {player['rarity'].capitalize()}\n\n"
        message += "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        message += f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: {player['stats']['speed']}\n"
        message += f"üß† –ú–µ–Ω—Ç–∞–ª–∫–∞: {player['stats']['mentality']}\n"
        message += f"‚öΩÔ∏è –£–¥–∞—Ä: {player['stats']['finishing']}\n"
        message += f"üõ° –ó–∞—â–∏—Ç–∞: {player['stats']['defense']}"
        
        storage.save_team(user_id, team)
        query.edit_message_text(message)
        
    except Exception as e:
        logger.error(f"Error in handle_sirena_callback: {str(e)}", exc_info=True)
        query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–Ω—É—Å–∞")

def main():
    """Start the bot"""
    # Initialize bot and create dispatcher
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # Add handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üíº –°–æ—Å—Ç–∞–≤$'), show_squad))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üé≤ –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞$'), buy_player))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üèü –ò–≥—Ä–∞—Ç—å –º–∞—Ç—á$'), play_match))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª—É–±$'), support_club))
    dispatcher.add_handler(MessageHandler(Filters.regex('^‚ùì –ù–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∑–∞ –±–æ—Ç$'), get_bot_info))
    
    # Callback handlers
    dispatcher.add_handler(CallbackQueryHandler(handle_toggle_player, pattern='^toggle_player_'))
    dispatcher.add_handler(CallbackQueryHandler(handle_support_action, pattern='^support_'))
    dispatcher.add_handler(CallbackQueryHandler(handle_match_difficulty, pattern='^match_'))
    dispatcher.add_handler(CallbackQueryHandler(handle_sirena_callback, pattern='^sirena_'))

    # Start the bot
    logger.info("Starting bot...")
    updater.start_polling()
    logger.info("Bot is running!")
    
    # Run the bot until you press Ctrl-C
    print("Bot is running! Press Ctrl+C to stop.")
    updater.idle()

if __name__ == "__main__":
    main()
